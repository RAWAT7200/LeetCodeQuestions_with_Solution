{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Regular;\f5\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red29\green38\blue42;\red255\green255\blue255;\red78\green106\blue120;
\red67\green91\blue103;\red245\green247\blue249;\red29\green38\blue42;}
{\*\expandedcolortbl;;\cssrgb\c14902\c19608\c21961;\cssrgb\c100000\c100000\c100000;\cssrgb\c37647\c49020\c54510;
\cssrgb\c32941\c43137\c47843;\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa280\partightenfactor0
\ls1\ilvl0
\f0\fs28 \cf2 \cb3 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Evaluate the value of an arithmetic expression in\'a0{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Reverse_Polish_notation"}}{\fldrslt \cf4 \strokec4 Reverse Polish Notation}}.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Valid operators are\'a0
\f1\fs26 \cf5 \cb6 \strokec5 +
\f0\fs28 \cf2 \cb3 \strokec2 ,\'a0
\f1\fs26 \cf5 \cb6 \strokec5 -
\f0\fs28 \cf2 \cb3 \strokec2 ,\'a0
\f1\fs26 \cf5 \cb6 \strokec5 *
\f0\fs28 \cf2 \cb3 \strokec2 ,\'a0
\f1\fs26 \cf5 \cb6 \strokec5 /
\f0\fs28 \cf2 \cb3 \strokec2 . Each operand may be an integer or another expression.\
\pard\pardeftab720\sl340\sa280\partightenfactor0
\ls1\ilvl0
\f2\b \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Note:
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Division between two integers should truncate toward zero.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't\'a0be any\'a0divide\'a0by zero operation.\cb1 \
\pard\pardeftab720\sl340\sa280\partightenfactor0
\ls1\ilvl0
\f2\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example 1:
\f0\b0 \
\pard\pardeftab720\sl400\partightenfactor0
\ls1\ilvl0
\f3\b\fs26 \cf2 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Input:
\f4\b0  ["2", "1", "+", "3", "*"]\
\ls1\ilvl0
\f3\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Output:
\f4\b0  9\
\ls1\ilvl0
\f3\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Explanation:
\f4\b0  ((2 + 1) * 3) = 9\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\fs28 \cf7 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f5\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97***********\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
class Solution \{\
public:\
    int evalRPN(vector<string>& tokens) \{\
        stack<string> stackk;\
        for(int i = 0 ; i < tokens.size() ; i++)\{\
            if(isdigit(tokens[i][0]))\{ // positive value\
                stackk.push(tokens[i]);\
            \}\
            else if((tokens[i][0] == '-') && isdigit(tokens[i][1]))\{ //negative value\
                stackk.push(tokens[i]);\
            \}\
            else\{\
                int later = stoi(stackk.top());\
                stackk.pop();\
                int previous = stoi(stackk.top());\
                stackk.pop();\
                if(tokens[i] == "+")\
                    stackk.push(to_string(later+previous));\
                else if(tokens[i] == "-")\
                    stackk.push(to_string(previous-later));\
                else if(tokens[i] == "*")\
                    stackk.push(to_string(later*previous));\
                else if(tokens[i] == "/")\
                    stackk.push(to_string(previous/later));\
            \}\
            //printf("i:%d cur:%s top:%s\\n",i,tokens[i].c_str(),stackk.top().c_str());\
        \}\
        return stoi(stackk.top());\
    \}\
\};}