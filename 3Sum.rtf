{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red29\green38\blue42;\red255\green255\blue255;\red67\green91\blue103;
\red245\green247\blue249;\red29\green38\blue42;}
{\*\expandedcolortbl;;\cssrgb\c14902\c19608\c21961;\cssrgb\c100000\c100000\c100000;\cssrgb\c32941\c43137\c47843;
\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Given an array\'a0
\f1\fs26 \cf4 \cb5 \strokec4 nums
\f0\fs28 \cf2 \cb3 \strokec2 \'a0of\'a0
\i n
\i0 \'a0integers, are there elements\'a0
\i a
\i0 ,\'a0
\i b
\i0 ,\'a0
\i c
\i0 \'a0in\'a0
\f1\fs26 \cf4 \cb5 \strokec4 nums
\f0\fs28 \cf2 \cb3 \strokec2 \'a0such that\'a0
\i a
\i0 \'a0+\'a0
\i b
\i0 \'a0+\'a0
\i c
\i0 \'a0= 0? Find all unique triplets in the array which gives the sum of zero.\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f2\b \cf2 Note:
\f0\b0 \
The solution set must not contain duplicate triplets.\

\f2\b Example:
\f0\b0 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs26 \cf2 \cb5 Given array nums = [-1, 0, 1, 2, -1, -4],\
\
A solution set is:\
[\
  [-1, 0, 1],\
  [-1, -1, 2]\
]\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f0\fs28 \cf6 \cb3 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f4\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97***********\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
    def threeSum(self, nums):\
        \
        """\
        :type nums: List[int]\
        :rtype: List[List[int]]\
        """\
        n=len(nums)\
        nums.sort()\
        i=0\
        \
        res=[]\
        while i<=n-2: \
            l=i+1\
            r=n-1\
            while l<r:\
                sum=nums[l]+nums[r]+nums[i]\
                if sum == 0:\
                    res.append((nums[i],nums[l],nums[r]))\
                      \
                    l=l+1\
                    r=r-1\
                elif sum > 0:\
                     r=r-1\
                else:\
                     l=l+1\
            i=i+1\
        L=set(res)\
        return list(L)}