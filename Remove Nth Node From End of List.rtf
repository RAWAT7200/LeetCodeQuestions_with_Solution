{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-BoldItalic;\f5\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red29\green38\blue42;\red255\green255\blue255;\red245\green247\blue249;
\red29\green38\blue42;}
{\*\expandedcolortbl;;\cssrgb\c14902\c19608\c21961;\cssrgb\c100000\c100000\c100000;\cssrgb\c96863\c97647\c98039;
\cssrgb\c14902\c19608\c21961;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Given a linked list, remove the\'a0
\i n
\i0 -th node from the end of list and return its head.\

\f1\b Example:
\f0\b0 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs26 \cf2 \cb4 Given linked list: 
\f3\b 1->2->3->4->5
\f2\b0 , and 
\f4\i\b n
\f3\i0  = 2
\f2\b0 .\
\
After removing the second node from the end, the linked list becomes 
\f3\b 1->2->3->5
\f2\b0 .\
\pard\pardeftab720\sl340\sa280\partightenfactor0

\f1\b\fs28 \cf2 \cb3 Note:
\f0\b0 \
Given\'a0
\i n
\i0 \'a0will always be valid.\

\f1\b Follow up:
\f0\b0 \
Could you do this in one pass?\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 \cb3 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f5\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97***********\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     struct ListNode *next;\
 * \};\
 */\
struct ListNode* removeNthFromEnd(struct ListNode* head, int n) \{\
    \
    \
    struct ListNode *temp,*start;\
    temp=head;\
    start=head;\
    int count=1;\
    while(temp->next!=NULL)\
    \{\
        count++;\
        temp=temp->next;\
    \}\
    if(count==1)\
        return NULL;\
    \
     if((count-n)==0)\
    \{ head=head->next;\
     return head;\
    \}\
    int times=count-n;\
    \
    while(--times>0)\
    \{\
        start=start->next;\
            \
    \}\
    start->next=start->next->next;\
    \
    return head;\
}